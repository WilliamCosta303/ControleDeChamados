package com.github.williamcosta303.visao;

import java.util.Date;
import java.text.SimpleDateFormat;

import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import com.github.williamcosta303.controle.ControleBanco;
import com.github.williamcosta303.modelo.Chamado;
import com.github.williamcosta303.modelo.Equipe;
import com.github.williamcosta303.modelo.Login;
import com.github.williamcosta303.modelo.Registro;
import java.sql.SQLException;
import javax.swing.JOptionPane;

public class Chamados extends javax.swing.JInternalFrame {

    private int codigoUsuario, codigoEquipe;
    private String username;
    private boolean chamadoAberto;
    private boolean editandoEquipe, editandoResponsavel, editandoDados;
    
    
    
    private DefaultTableModel DTMusuario = new DefaultTableModel(
            new Object[][]{},
            new Object[]{"Tipo","Nº"}) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    
    private DefaultTableModel DTMequipe = new DefaultTableModel(
            new Object[][]{},
            new Object[]{"Tipo","Nº"}) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    
    private DefaultTableModel DTMlistaChamados = new DefaultTableModel(
            new Object[][]{},
            new Object[]{"Chamado","Título","Categoria","Localização","Estação","Descrição","Responsável","Contato"}) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    
    private DefaultTableModel DTMRegistros = new DefaultTableModel(
            new Object[][]{},
            new Object[]{"Código","Autor","Horário","Registro"}) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
    
    /**
     * Creates new form Chamados
     */
    public Chamados() {
        initComponents();
        this.cDadosEquipe.setEnabled(false);
        this.cDadosResponsavel.setEnabled(false);
        this.painelEditarRegistro.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        cRegistroData = new javax.swing.JFormattedTextField();
        bNovoRegistroCriar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cRegistroHorario = new javax.swing.JFormattedTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        cRegistroInform = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tMeusChamados = new javax.swing.JTable();
        bAtualizarMeusChamados = new javax.swing.JButton();
        bExibirUsuario = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tMinhaEquipe = new javax.swing.JTable();
        bAtualizarEquipe = new javax.swing.JButton();
        bExibirEquipe = new javax.swing.JButton();
        abas1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tChamados = new javax.swing.JTable();
        lExibicao = new javax.swing.JLabel();
        bVerChamado = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        abas2 = new javax.swing.JTabbedPane();
        chamadoDados = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cDadosChamado = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cDadosTitulo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cDadosLocalizacao = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cDadosNomeEstacao = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        cDadosDescricao = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        cDadosEquipe = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cDadosResponsavel = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        bDadosCapturar = new javax.swing.JButton();
        bDadosEditar = new javax.swing.JButton();
        bDadosSuspender = new javax.swing.JButton();
        bDadosEncerrar = new javax.swing.JButton();
        bDadosFazerRegistro = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lEstado = new javax.swing.JLabel();
        bDadosTrocarEquipe = new javax.swing.JButton();
        bDadosTrocarResponsavel = new javax.swing.JButton();
        cDadosCategoria = new javax.swing.JComboBox();
        chamadoRegistros = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tRegistros = new javax.swing.JTable();
        bRegistrosNovo = new javax.swing.JButton();
        bRegistrosVer = new javax.swing.JButton();
        painelEditarRegistro = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        cRegistrosEditarCodigo = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cRegistrosEditarAutor = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        cRegistrosEditarData = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        cRegistrosEditarHorario = new javax.swing.JFormattedTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        cRegistrosEditarRegistro = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        bRegistrosEditarAtualizar = new javax.swing.JButton();
        bRegistrosEditarCancelar = new javax.swing.JButton();
        bRegistrosEditar = new javax.swing.JButton();
        chamadosBuscar = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        cBuscarNumero = new javax.swing.JTextField();
        bBuscarNumero = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        cBuscarDados01 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        cBuscarDadosValor = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        bBuscarDados = new javax.swing.JButton();
        cBuscarDadosIncluirFechados = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        cBuscarRegistroValor = new javax.swing.JTextField();
        bBuscarRegistro = new javax.swing.JButton();
        cBuscarRegistroIncluirFechados = new javax.swing.JCheckBox();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog1.setTitle("Fazer novo registro");
        jDialog1.setResizable(false);
        jDialog1.setType(java.awt.Window.Type.UTILITY);
        jDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jDialog1WindowClosing(evt);
            }
        });

        try {
            cRegistroData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        cRegistroData.setText("12/10/1000");

        bNovoRegistroCriar.setText("Registrar");
        bNovoRegistroCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNovoRegistroCriarActionPerformed(evt);
            }
        });

        jLabel10.setText("Data");

        jLabel11.setText("Horário");

        try {
            cRegistroHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        cRegistroHorario.setText("10:20");

        cRegistroInform.setColumns(20);
        cRegistroInform.setRows(5);
        jScrollPane6.setViewportView(cRegistroInform);

        jLabel12.setText("Registro");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDialog1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDialog1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cRegistroData)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jDialog1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cRegistroHorario))))
                .addContainerGap())
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(bNovoRegistroCriar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cRegistroData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cRegistroHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bNovoRegistroCriar)
                .addGap(29, 29, 29))
        );

        setIconifiable(true);
        setTitle("Chamados");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Meus chamados"));

        tMeusChamados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Nº"
            }
        ));
        tMeusChamados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tMeusChamados);

        bAtualizarMeusChamados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/reload-16.png"))); // NOI18N
        bAtualizarMeusChamados.setText("F5");
        bAtualizarMeusChamados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtualizarMeusChamadosActionPerformed(evt);
            }
        });

        bExibirUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/verRegis-16.png"))); // NOI18N
        bExibirUsuario.setText("Exibir");
        bExibirUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExibirUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bExibirUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bAtualizarMeusChamados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bAtualizarMeusChamados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bExibirUsuario))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Minha equipe"));

        tMinhaEquipe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Nº"
            }
        ));
        tMinhaEquipe.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tMinhaEquipe);

        bAtualizarEquipe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/reload-16.png"))); // NOI18N
        bAtualizarEquipe.setText("F5");
        bAtualizarEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAtualizarEquipeActionPerformed(evt);
            }
        });

        bExibirEquipe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/verRegis-16.png"))); // NOI18N
        bExibirEquipe.setText("Exibir");
        bExibirEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExibirEquipeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bAtualizarEquipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bExibirEquipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(bAtualizarEquipe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bExibirEquipe))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tChamados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Chamado", "Título", "Categoria", "Localização", "Estação", "Descrição", "Responsavel", "Contato"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tChamados.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tChamados);

        lExibicao.setText("Exibição atual: Chamados abertos da minha equipe");

        bVerChamado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/verRegis-8.png"))); // NOI18N
        bVerChamado.setText("Ver chamado");
        bVerChamado.setToolTipText("Abre o chamado selecionado na tabela abaixo");
        bVerChamado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerChamadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 871, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lExibicao, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bVerChamado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lExibicao)
                    .addComponent(bVerChamado, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        abas1.addTab("Lista Chamados", jPanel3);

        jLabel1.setText("Chamado");

        cDadosChamado.setEditable(false);

        jLabel2.setText("Título");

        cDadosTitulo.setEditable(false);

        jLabel3.setText("Categoria");

        jLabel4.setText("Localização");

        cDadosLocalizacao.setEditable(false);

        jLabel5.setText("Nome do micro");

        cDadosNomeEstacao.setEditable(false);

        jLabel6.setText("Descrição:");

        cDadosDescricao.setEditable(false);
        cDadosDescricao.setColumns(20);
        cDadosDescricao.setRows(5);
        jScrollPane4.setViewportView(cDadosDescricao);

        jLabel7.setText("Equipe");

        cDadosEquipe.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cDadosEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDadosEquipeActionPerformed(evt);
            }
        });

        jLabel8.setText("Responsável");

        cDadosResponsavel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---" }));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Ações"));

        bDadosCapturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/capturar-16.png"))); // NOI18N
        bDadosCapturar.setText("Capturar chamado");
        bDadosCapturar.setToolTipText("Move o chamado para sua equipe e ele fica sobre sua responsábilidade");
        bDadosCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosCapturarActionPerformed(evt);
            }
        });

        bDadosEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/editar-16.png"))); // NOI18N
        bDadosEditar.setText("Editar informações");
        bDadosEditar.setToolTipText("Habilita/confirma a alteração dos campos do chamado");
        bDadosEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosEditarActionPerformed(evt);
            }
        });

        bDadosSuspender.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/suspender-16.png"))); // NOI18N
        bDadosSuspender.setText("Suspender chamado");
        bDadosSuspender.setToolTipText("Suspende o chamado, o mantendo fora da lista de atendimento");
        bDadosSuspender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosSuspenderActionPerformed(evt);
            }
        });

        bDadosEncerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/encerrar-16.png"))); // NOI18N
        bDadosEncerrar.setText("Encerrar chamado");
        bDadosEncerrar.setToolTipText("Encerra o chamado, quando este já foi resolvido");
        bDadosEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosEncerrarActionPerformed(evt);
            }
        });

        bDadosFazerRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/novoCh-16.png"))); // NOI18N
        bDadosFazerRegistro.setText("Fazer registro");
        bDadosFazerRegistro.setToolTipText("Realiza um registro rápido, sem a possibilidade de alterar algumas informações");
        bDadosFazerRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosFazerRegistroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bDadosSuspender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDadosEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDadosCapturar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bDadosEncerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bDadosFazerRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addGap(116, 116, 116))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bDadosCapturar)
                    .addComponent(bDadosFazerRegistro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDadosEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bDadosSuspender)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bDadosEncerrar))
        );

        jLabel9.setText("Estado atual:");

        lEstado.setText("Aberto");

        bDadosTrocarEquipe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/alterarResp-16.png"))); // NOI18N
        bDadosTrocarEquipe.setText("Trocar");
        bDadosTrocarEquipe.setToolTipText("Habilita/confirma troca de equipe do chamado");
        bDadosTrocarEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosTrocarEquipeActionPerformed(evt);
            }
        });

        bDadosTrocarResponsavel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/alterarResp-16.png"))); // NOI18N
        bDadosTrocarResponsavel.setText("Trocar");
        bDadosTrocarResponsavel.setToolTipText("Habilita/confirma a troca de responsável do chamado em uma equipe");
        bDadosTrocarResponsavel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDadosTrocarResponsavelActionPerformed(evt);
            }
        });

        cDadosCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---", "Instalação Software", "Manutenção Software", "Manutenção de computador", "Sistemas Internos (AGHWEB)", "Sistemas Terceiros", "Impressoras", "Outros" }));
        cDadosCategoria.setEnabled(false);

        javax.swing.GroupLayout chamadoDadosLayout = new javax.swing.GroupLayout(chamadoDados);
        chamadoDados.setLayout(chamadoDadosLayout);
        chamadoDadosLayout.setHorizontalGroup(
            chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chamadoDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(chamadoDadosLayout.createSequentialGroup()
                        .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cDadosLocalizacao)
                            .addComponent(cDadosTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(cDadosChamado, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(cDadosNomeEstacao, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(cDadosCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chamadoDadosLayout.createSequentialGroup()
                        .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cDadosEquipe, javax.swing.GroupLayout.Alignment.LEADING, 0, 199, Short.MAX_VALUE)
                            .addComponent(cDadosResponsavel, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bDadosTrocarResponsavel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bDadosTrocarEquipe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chamadoDadosLayout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))))
        );
        chamadoDadosLayout.setVerticalGroup(
            chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chamadoDadosLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cDadosChamado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(cDadosEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bDadosTrocarEquipe, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cDadosTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(cDadosResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bDadosTrocarResponsavel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9)
                    .addComponent(lEstado)
                    .addComponent(cDadosCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cDadosLocalizacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(chamadoDadosLayout.createSequentialGroup()
                        .addGroup(chamadoDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cDadosNomeEstacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        abas2.addTab("Dados", chamadoDados);

        tRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Autor", "Horário", "Registro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tRegistros.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(tRegistros);

        bRegistrosNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/novoCh-16.png"))); // NOI18N
        bRegistrosNovo.setText("Fazer novo registro");
        bRegistrosNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRegistrosNovoActionPerformed(evt);
            }
        });

        bRegistrosVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/verRegis-16.png"))); // NOI18N
        bRegistrosVer.setText("Ver Registro");
        bRegistrosVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRegistrosVerActionPerformed(evt);
            }
        });

        painelEditarRegistro.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Editar registro"));

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Código");

        cRegistrosEditarCodigo.setEditable(false);
        cRegistrosEditarCodigo.setBackground(new java.awt.Color(204, 204, 204));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Autor");

        cRegistrosEditarAutor.setEditable(false);
        cRegistrosEditarAutor.setBackground(new java.awt.Color(204, 204, 204));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Data");

        try {
            cRegistrosEditarData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Horário");

        try {
            cRegistrosEditarHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        cRegistrosEditarRegistro.setColumns(20);
        cRegistrosEditarRegistro.setRows(5);
        jScrollPane7.setViewportView(cRegistrosEditarRegistro);

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Registro");

        bRegistrosEditarAtualizar.setText("Atualizar");
        bRegistrosEditarAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRegistrosEditarAtualizarActionPerformed(evt);
            }
        });

        bRegistrosEditarCancelar.setText("Cancelar");
        bRegistrosEditarCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRegistrosEditarCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cRegistrosEditarData, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addComponent(cRegistrosEditarHorario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bRegistrosEditarAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bRegistrosEditarCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(cRegistrosEditarData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(cRegistrosEditarHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(bRegistrosEditarAtualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bRegistrosEditarCancelar)))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout painelEditarRegistroLayout = new javax.swing.GroupLayout(painelEditarRegistro);
        painelEditarRegistro.setLayout(painelEditarRegistroLayout);
        painelEditarRegistroLayout.setHorizontalGroup(
            painelEditarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEditarRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEditarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelEditarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cRegistrosEditarCodigo)
                    .addComponent(cRegistrosEditarAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        painelEditarRegistroLayout.setVerticalGroup(
            painelEditarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelEditarRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelEditarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(cRegistrosEditarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelEditarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(cRegistrosEditarAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(painelEditarRegistroLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bRegistrosEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/editar-16.png"))); // NOI18N
        bRegistrosEditar.setText("Editar Registro");
        bRegistrosEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRegistrosEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chamadoRegistrosLayout = new javax.swing.GroupLayout(chamadoRegistros);
        chamadoRegistros.setLayout(chamadoRegistrosLayout);
        chamadoRegistrosLayout.setHorizontalGroup(
            chamadoRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chamadoRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chamadoRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addGroup(chamadoRegistrosLayout.createSequentialGroup()
                        .addComponent(bRegistrosNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRegistrosVer, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bRegistrosEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(painelEditarRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        chamadoRegistrosLayout.setVerticalGroup(
            chamadoRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chamadoRegistrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(chamadoRegistrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bRegistrosNovo)
                    .addComponent(bRegistrosVer)
                    .addComponent(bRegistrosEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelEditarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abas2.addTab("Registros", chamadoRegistros);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar por número"));

        bBuscarNumero.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/pesquisar-16.png"))); // NOI18N
        bBuscarNumero.setText("Buscar");
        bBuscarNumero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarNumeroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cBuscarNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bBuscarNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBuscarNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscarNumero))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar por dados"));

        cBuscarDados01.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---", "Título", "Localização", "Nome da estação", "Descrição", "Aberto Por" }));

        jLabel13.setText("Campo");

        cBuscarDadosValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBuscarDadosValorActionPerformed(evt);
            }
        });

        jLabel14.setText("Valor");

        bBuscarDados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/pesquisar-16.png"))); // NOI18N
        bBuscarDados.setText("Buscar");
        bBuscarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarDadosActionPerformed(evt);
            }
        });

        cBuscarDadosIncluirFechados.setText("Incluir chamados encerrados");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cBuscarDadosValor)
                    .addComponent(cBuscarDados01, 0, 178, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cBuscarDadosIncluirFechados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bBuscarDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBuscarDados01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(bBuscarDados))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBuscarDadosValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(cBuscarDadosIncluirFechados))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar por registros"));

        bBuscarRegistro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/github/williamcosta303/imagens/pesquisar-16.png"))); // NOI18N
        bBuscarRegistro.setText("Buscar");
        bBuscarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarRegistroActionPerformed(evt);
            }
        });

        cBuscarRegistroIncluirFechados.setText("Incluir chamados encerrados");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cBuscarRegistroValor, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bBuscarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cBuscarRegistroIncluirFechados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(167, 167, 167))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cBuscarRegistroValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscarRegistro)
                    .addComponent(cBuscarRegistroIncluirFechados))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout chamadosBuscarLayout = new javax.swing.GroupLayout(chamadosBuscar);
        chamadosBuscar.setLayout(chamadosBuscarLayout);
        chamadosBuscarLayout.setHorizontalGroup(
            chamadosBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chamadosBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chamadosBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        chamadosBuscarLayout.setVerticalGroup(
            chamadosBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chamadosBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        abas2.addTab("Buscar", chamadosBuscar);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abas2)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(abas2)
                .addContainerGap())
        );

        abas1.addTab("Chamado", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(abas1, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abas1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAtualizarMeusChamadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtualizarMeusChamadosActionPerformed
        this.atualizarTabelaUsuario();
    }//GEN-LAST:event_bAtualizarMeusChamadosActionPerformed

    private void bExibirUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExibirUsuarioActionPerformed
        int linhaSelecionada = this.tMeusChamados.getSelectedRow();

        if (linhaSelecionada != -1){
            if(this.tMeusChamados.getValueAt(linhaSelecionada, 0).equals("Chamados abertos")){
                // Exibe chamados abertos
                this.lExibicao.setText("Exibição atual: Meus chamados abertos");
            } else {
                // Exibe chamados suspensos
                this.lExibicao.setText("Exibição atual: Meus chamados suspensos");
            }

            this.atualizarTabelaChamados(0);
            this.abas1.setSelectedIndex(0);
            this.abas2.setSelectedIndex(0);
        } else {
            JOptionPane.showMessageDialog(this, "É necessário selecionar o tipo de chamados à exibir,\nclicando em uma linha!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bExibirUsuarioActionPerformed

    private void bAtualizarEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAtualizarEquipeActionPerformed
        this.atualizarTabelaEquipe();
    }//GEN-LAST:event_bAtualizarEquipeActionPerformed

    private void bExibirEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExibirEquipeActionPerformed
        int linhaSelecionada = this.tMinhaEquipe.getSelectedRow();

        if (linhaSelecionada != -1){
            if(this.tMinhaEquipe.getValueAt(linhaSelecionada, 0).equals("Chamados abertos")){
                // Exibe chamados abertos
                this.lExibicao.setText("Exibição atual: Chamados abertos da minha equipe");
            } else {
                // Exibe chamados suspensos
                this.lExibicao.setText("Exibição atual: Chamados suspensos da minha equipe");
            }
            this.atualizarTabelaChamados(0);
            this.abas1.setSelectedIndex(0);
            this.abas2.setSelectedIndex(0);
        } else {
            JOptionPane.showMessageDialog(this, "É necessário selecionar o tipo de chamados à exibir,\nclicando em uma linha!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bExibirEquipeActionPerformed

    private void bVerChamadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerChamadoActionPerformed
        int linhaSelecionada = this.tChamados.getSelectedRow();
        if(linhaSelecionada != -1){
            this.abrirChamado(Integer.parseInt((String)this.tChamados.getValueAt(linhaSelecionada, 0)));
        } else {
            JOptionPane.showMessageDialog(this, "É necessário selecionar um chamado clicando em uma linha!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bVerChamadoActionPerformed

    private void cDadosEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDadosEquipeActionPerformed
        this.atualizarFuncionarios(this.cDadosEquipe.getSelectedIndex()+1);
    }//GEN-LAST:event_cDadosEquipeActionPerformed

    private void bDadosCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosCapturarActionPerformed
        if(this.chamadoAberto){
            if(!this.lEstado.getText().equals("Encerrado")){
                try{
                    ControleBanco CB = new ControleBanco();
                    CB.capturarChamado(Integer.parseInt(cDadosChamado.getText()), this.codigoUsuario, this.codigoEquipe);

                    // Atualizações de tabelas/campos
                    this.atualizarTabelaEquipe();
                    this.atualizarTabelaUsuario();
                    this.atualizarTabelaChamados(0);
                    this.selecionarResponsavel(Integer.parseInt(cDadosChamado.getText()));

                    // Registro no sistema
                    this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado capturado por: " + this.username + " <<");

                    // Confirmação para o usuário
                    JOptionPane.showMessageDialog(this, "Chamado capturado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                }catch(SQLException SE){
                    JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Chamados encerrados não podem ser capturados!\nÉ necessário reabrir o chamado primeiro!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "É necessário abrir um chamado primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bDadosCapturarActionPerformed

    private void bDadosEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosEditarActionPerformed
        /**
        * ------------
        * Editar informações do chamado
        * ------------
        */
        try{
            if(this.chamadoAberto){
                if(!this.editandoDados){
                    this.setCamposEdicao(true);

                    JOptionPane.showMessageDialog(this, "Edite os dados necessários e clique nesse botão novamente para salvar as edições!", "Editar dados", JOptionPane.INFORMATION_MESSAGE);

                    this.editandoDados = true;
                } else {
                    int confirma = JOptionPane.showConfirmDialog(this, "Deseja salvar as alterações feitas?", "Editar dados", JOptionPane.YES_NO_OPTION);
                    if(confirma == JOptionPane.YES_OPTION){
                        if(this.cDadosTitulo.getText().length() <= 75 &&
                            this.cDadosLocalizacao.getText().length() <= 50 &&
                            this.cDadosNomeEstacao.getText().length() <= 50 &&
                            this.cDadosDescricao.getText().length() <= 140 &&
                            this.cDadosCategoria.getSelectedIndex() != 0){
                            // Se dados estiverem corretos
                            ControleBanco CB = new ControleBanco();
                            CB.editarDadosChamado(Integer.parseInt(this.cDadosChamado.getText()), this.cDadosTitulo.getText(), this.cDadosCategoria.getSelectedItem().toString(), this.cDadosLocalizacao.getText(), this.cDadosNomeEstacao.getText(), this.cDadosDescricao.getText());

                            // Faz um registro da alteração dos dados
                            this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Dados do chamado alterados <<");

                            JOptionPane.showMessageDialog(this, "Dados alterados com sucesso!", "Editar dados", JOptionPane.INFORMATION_MESSAGE);

                            this.setCamposEdicao(false);
                        } else {
                            int confirma2 = JOptionPane.showConfirmDialog(this, "Algum campo está incorreto!\nDeseja tentar novamente?", "Editar dados", JOptionPane.YES_NO_OPTION);
                            if(confirma2 == JOptionPane.NO_OPTION){
                                this.setCamposEdicao(false);
                            }
                        }
                    } else {
                        this.setCamposEdicao(false);
                    } // FIM ELSE NÃO SALVAR ALTERAÇÕES
                    this.editandoDados = false;
                }
            } else {
                JOptionPane.showMessageDialog(this, "É necessário abrir um chamado primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bDadosEditarActionPerformed

    private void bDadosSuspenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosSuspenderActionPerformed
        try{
            if(this.chamadoAberto){
                ControleBanco CB = new ControleBanco();
                if(this.lEstado.getText().equals("Aberto")){
                    CB.alterarEstadoChamado(Integer.parseInt(this.cDadosChamado.getText()), 1);

                    // Atualiza informações do usuário
                    this.atualizarTabelaEquipe();
                    this.atualizarTabelaUsuario();
                    this.atualizarTabelaChamados(0);
                    this.lEstado.setText("Suspenso");
                    this.bDadosSuspender.setText("Reativar chamado");

                    // Desabilita opção de encerrar
                    this.bDadosEncerrar.setEnabled(false);
                    this.bDadosEncerrar.setText("Encerrar chamado");

                    // Registra no chamado que o chamado foi suspenso
                    this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado suspenso <<");

                    JOptionPane.showMessageDialog(this, "Chamado suspenso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } else if(this.lEstado.getText().equals("Suspenso")){
                    CB.alterarEstadoChamado(Integer.parseInt(this.cDadosChamado.getText()), 0);

                    // Atualiza informações do usuário
                    this.atualizarTabelaEquipe();
                    this.atualizarTabelaUsuario();
                    this.atualizarTabelaChamados(0);
                    this.lEstado.setText("Aberto");
                    this.bDadosSuspender.setText("Suspender chamado");

                    // Habilita opção de encerrar
                    this.bDadosEncerrar.setEnabled(true);
                    this.bDadosEncerrar.setText("Encerrar chamado");

                    // Registra no chamado que o chamado foi reativado
                    this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado reativado <<");

                    JOptionPane.showMessageDialog(this, "Chamado reativado!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "É necessário abrir um chamado primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bDadosSuspenderActionPerformed

    private void bDadosEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosEncerrarActionPerformed
        try {
            if(this.chamadoAberto){
                ControleBanco CB = new ControleBanco();
                if(this.lEstado.getText().equals("Aberto")){
                    if(this.cDadosResponsavel.getSelectedIndex() != 0){
                        CB.alterarEstadoChamado(Integer.parseInt(this.cDadosChamado.getText()), 2);

                        // Atualiza informações do usuário
                        this.atualizarTabelaEquipe();
                        this.atualizarTabelaUsuario();
                        this.atualizarTabelaChamados(0);
                        this.lEstado.setText("Encerrado");
                        this.bDadosEncerrar.setText("Reabrir chamado");

                        // Desabilita opção de suspender
                        this.bDadosSuspender.setEnabled(false);
                        this.bDadosSuspender.setText("Suspender chamado");

                        // Registra no chamado que o chamado foi encerrado
                        this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado encerrado <<");

                        JOptionPane.showMessageDialog(this, "Chamado encerrado!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Chamados não podem ser encerrados sem um responsável!", "ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                } else if(this.lEstado.getText().equals("Encerrado")){
                    int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja reabrir o chamado?", "Reabrir chamado", JOptionPane.YES_NO_OPTION);
                    if(confirma == JOptionPane.YES_OPTION){
                        CB.alterarEstadoChamado(Integer.parseInt(this.cDadosChamado.getText()), 0);

                        // Atualiza informações do usuário
                        this.atualizarTabelaEquipe();
                        this.atualizarTabelaUsuario();
                        this.atualizarTabelaChamados(0);
                        this.lEstado.setText("Aberto");
                        this.bDadosEncerrar.setText("Encerrar chamado");

                        // Habilita opção de suspender
                        this.bDadosSuspender.setEnabled(true);
                        this.bDadosSuspender.setText("Suspender chamado");

                        // Registra no chamado que o chamado foi reaberto
                        this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado reaberto <<");

                        JOptionPane.showMessageDialog(this, "Chamado reaberto!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "É necessário abrir um chamado primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException SE) {
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bDadosEncerrarActionPerformed

    private void bDadosFazerRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosFazerRegistroActionPerformed
        this.fazerRegistroRapido();
    }//GEN-LAST:event_bDadosFazerRegistroActionPerformed

    private void bDadosTrocarEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosTrocarEquipeActionPerformed
        try{
            if(this.chamadoAberto && !this.editandoResponsavel){
                if(!this.editandoEquipe){
                    this.setCamposAlterarResponsavel(true, true);
                    JOptionPane.showMessageDialog(this, "Selecione uma equipe no campo,\ndepois clique nesse botão novamente!", "Trocar equipe do chamado", JOptionPane.INFORMATION_MESSAGE);
                    this.editandoEquipe = true;
                } else {
                    if(this.cDadosEquipe.getSelectedIndex() != 0){
                        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja mover o chamado para a equipe '" + this.cDadosEquipe.getSelectedItem().toString() + "'?", "Trocar equipe do chamado", JOptionPane.YES_NO_OPTION);
                        if(confirma == JOptionPane.YES_OPTION){
                            ControleBanco CB = new ControleBanco();
                            CB.encaminharChamado(true, Integer.parseInt(this.cDadosChamado.getText()), this.cDadosEquipe.getSelectedIndex()+1);

                            // Reativa os campos e desativa a seleção de equipe
                            this.setCamposAlterarResponsavel(true, false);

                            // Registra no chamado a troca de equipe
                            this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado repassado para outra equipe: " + this.cDadosEquipe.getSelectedItem().toString() + " <<");

                            // Atualiza campos do usuário
                            this.atualizarTabelaEquipe();
                            this.atualizarTabelaUsuario();
                            this.atualizarTabelaChamados(0);

                            JOptionPane.showMessageDialog(this, "Equipe trocada!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Cancelando troca de equipe!", "ERRO", JOptionPane.WARNING_MESSAGE);
                            this.setCamposAlterarResponsavel(true, false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Equipe inválida!\nCancelando troca de equipe!", "ERRO", JOptionPane.ERROR_MESSAGE);
                        this.setCamposAlterarResponsavel(true, false);
                    }

                    this.editandoEquipe = false;
                }

                this.selecionarResponsavel(Integer.parseInt(this.cDadosChamado.getText()));
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bDadosTrocarEquipeActionPerformed

    private void bDadosTrocarResponsavelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDadosTrocarResponsavelActionPerformed
        try{
            if(this.chamadoAberto && !this.editandoEquipe){
                if(!this.editandoResponsavel){
                    JOptionPane.showMessageDialog(this, "Selecione uma responsável no campo,\ndepois clique nesse botão novamente!", "Trocar responsável do chamado", JOptionPane.INFORMATION_MESSAGE);
                    this.editandoResponsavel = true;
                    this.setCamposAlterarResponsavel(false, true);
                } else {

                    if(this.cDadosResponsavel.getSelectedIndex() != 0){
                        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja encaminhar o chamado para '" + this.cDadosResponsavel.getSelectedItem().toString() + "'?", "Trocar equipe do chamado", JOptionPane.YES_NO_OPTION);
                        if(confirma == JOptionPane.YES_OPTION){
                            ControleBanco CB = new ControleBanco();
                            CB.encaminharChamado(false, Integer.parseInt(this.cDadosChamado.getText()), CB.receberCodigoUsuarioPorNome(this.cDadosResponsavel.getSelectedItem().toString()));

                            // Registra no chamado a troca de responsável
                            this.realizarRegistroSistema(Integer.parseInt(this.cDadosChamado.getText()), ">> Chamado repassado para responsável: " + this.cDadosResponsavel.getSelectedItem().toString() + " <<");

                            // Atualiza campos do usuário
                            this.atualizarTabelaEquipe();
                            this.atualizarTabelaUsuario();
                            this.atualizarTabelaChamados(0);

                            // Reativa os campos
                            this.setCamposAlterarResponsavel(false, false);

                            JOptionPane.showMessageDialog(this, "Chamado encaminhado!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Cancelando troca de usuário!", "ERRO", JOptionPane.WARNING_MESSAGE);
                            this.setCamposAlterarResponsavel(false, false);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Usuário inválida!\nCancelando troca de equipe!", "ERRO", JOptionPane.ERROR_MESSAGE);
                        this.setCamposAlterarResponsavel(false, false);
                    }

                    this.editandoResponsavel = false;
                    //this.cDadosResponsavel.setEnabled(false);
                }
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bDadosTrocarResponsavelActionPerformed

    private void bRegistrosNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRegistrosNovoActionPerformed
        if(this.chamadoAberto){
            this.setCamposNovoRegistro(true);
            this.jDialog1.setVisible(true);
            this.jDialog1.setSize(284, 350);
            this.cRegistroData.setText(this.recebeDataDoDia(false));
            this.cRegistroHorario.setText(this.recebeHorario(false));
            this.cRegistroInform.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "É necessário abrir um chamado primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bRegistrosNovoActionPerformed

    private void bRegistrosVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRegistrosVerActionPerformed
        int linhaSelecionada = this.tRegistros.getSelectedRow();

        if(linhaSelecionada != -1){
            JOptionPane.showMessageDialog(this, "Autor: " + this.tRegistros.getValueAt(linhaSelecionada, 1) +
                "\n" + "Data: " + this.tRegistros.getValueAt(linhaSelecionada, 2) +
                "\n" + "Registro:\n" + this.tRegistros.getValueAt(linhaSelecionada, 3), "Ver registro", JOptionPane.PLAIN_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "É necessário selecionar um registro clicando em uma linha primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bRegistrosVerActionPerformed

    private void bBuscarNumeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarNumeroActionPerformed
        try{
            int codigo = Integer.parseInt(this.cBuscarNumero.getText());
            ControleBanco CB = new ControleBanco();

            if(CB.chamadoExiste(codigo)){
                JOptionPane.showMessageDialog(this, "Chamado encontrado!\nO chamado será aberto agora!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                this.abrirChamado(codigo);
            } else {
                JOptionPane.showMessageDialog(this, "Chamado não localizado!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }

        }catch(NumberFormatException NFE){
            JOptionPane.showMessageDialog(this, "Digite apenas números no campo!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bBuscarNumeroActionPerformed

    private void bNovoRegistroCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNovoRegistroCriarActionPerformed
        try {
            if(this.cRegistroInform.getText().length() > 0 && this.cRegistroInform.getText().length() <= 240){
                ControleBanco CB = new ControleBanco();
                CB.criarNovoRegistro(this.username, this.cRegistroData.getText(), this.cRegistroHorario.getText(), this.cRegistroInform.getText(), Integer.parseInt(this.cDadosChamado.getText()));

                this.atualizarTabelaRegistros(Integer.parseInt(this.cDadosChamado.getText()));
                JOptionPane.showMessageDialog(this, "Registro realizado com sucesso!");

                this.setCamposNovoRegistro(false);
                this.jDialog1.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Registro inválido!\nVerifique a quantidade de caracteres (Limite de 240)", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException SE) {
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bNovoRegistroCriarActionPerformed

    private void jDialog1WindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowClosing
        this.setCamposNovoRegistro(false);
        this.jDialog1.dispose();
    }//GEN-LAST:event_jDialog1WindowClosing

    private void cBuscarDadosValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBuscarDadosValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBuscarDadosValorActionPerformed

    private void bBuscarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarDadosActionPerformed
        if(this.cBuscarDados01.getSelectedIndex() != 0){
            if(!this.cBuscarDadosValor.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Pesquisa realizada", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                this.lExibicao.setText("Exibição atual: Pesquisa por campo");
                this.atualizarTabelaChamados(1);
                this.abas1.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(this, "É necessário preencher um valor para procura!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "É necessário selecionar um campo para procura!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bBuscarDadosActionPerformed

    private void bBuscarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarRegistroActionPerformed
        if(!this.cBuscarRegistroValor.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Pesquisa realizada", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            this.lExibicao.setText("Exibição atual: Pesquisa por registro");
            this.atualizarTabelaChamados(2);
            this.abas1.setSelectedIndex(0);
        } else {
            JOptionPane.showMessageDialog(this, "É necessário preencher um valor para procura!", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bBuscarRegistroActionPerformed

    private void bRegistrosEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRegistrosEditarActionPerformed
        int linhaSelecionada = this.tRegistros.getSelectedRow();

        if(linhaSelecionada != -1){
            if(!this.tRegistros.getValueAt(linhaSelecionada, 3).toString().startsWith(">> ") && !this.tRegistros.getValueAt(linhaSelecionada, 3).toString().endsWith(" <<") ){
                this.setCamposEditarRegistro(true);
                this.cRegistrosEditarCodigo.setText(this.tRegistros.getValueAt(linhaSelecionada, 0).toString());
                this.cRegistrosEditarAutor.setText(this.tRegistros.getValueAt(linhaSelecionada, 1).toString());
                // Recebe os valores de um campo "Horário" e os transforma em dois campos
                this.cRegistrosEditarData.setText(this.tRegistros.getValueAt(linhaSelecionada, 2).toString().substring(0, 2) + this.tRegistros.getValueAt(linhaSelecionada, 2).toString().substring(3, 5) + this.tRegistros.getValueAt(linhaSelecionada, 2).toString().substring(6, 10));
                this.cRegistrosEditarHorario.setText(this.tRegistros.getValueAt(linhaSelecionada, 2).toString().substring(13, 16) + this.tRegistros.getValueAt(linhaSelecionada, 2).toString().substring(16, 18));
                this.cRegistrosEditarRegistro.setText(this.tRegistros.getValueAt(linhaSelecionada, 3).toString());
            } else {
                JOptionPane.showMessageDialog(this, "Não é permitido a edição de registros feitos pelo sistema!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "É necessário selecionar um registro clicando em uma linha primeiro!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_bRegistrosEditarActionPerformed

    private void bRegistrosEditarAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRegistrosEditarAtualizarActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja ATUALIZAR as informações deste registro?", "Confirmar ação", JOptionPane.YES_NO_CANCEL_OPTION);
        if(confirma == JOptionPane.YES_OPTION){
            ControleBanco CB = new ControleBanco();
            try{
                // Edita os campos no banco de dados
                CB.editarRegistro(Integer.parseInt(this.cRegistrosEditarCodigo.getText()), this.cRegistrosEditarData.getText(), this.cRegistrosEditarHorario.getText(), this.cRegistrosEditarRegistro.getText());
                // Reabilita os outros campos
                this.setCamposEditarRegistro(false);
                // Atualiza a tabela de registros para atualizar o "novo" registro
                this.atualizarTabelaRegistros(Integer.parseInt(this.cDadosChamado.getText()));
                // Mensagem de sucesso para o usuário
                JOptionPane.showMessageDialog(this, "Registro atualizado com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
            }catch(SQLException SE){
                JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } else if (confirma == JOptionPane.CANCEL_OPTION){ // Usuário escolha cancelar
            // Rabilita os outros campos
            this.setCamposEditarRegistro(false);
            // Mensagem de cancelamento
            JOptionPane.showMessageDialog(this, "Cancelando atualização de registro!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_bRegistrosEditarAtualizarActionPerformed

    private void bRegistrosEditarCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRegistrosEditarCancelarActionPerformed
        int confirma = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja cancelar a atualização do registro?", "Confirmar ação", JOptionPane.YES_NO_OPTION);
        if(confirma == JOptionPane.YES_OPTION){
            this.setCamposEditarRegistro(false);
        }
    }//GEN-LAST:event_bRegistrosEditarCancelarActionPerformed

    private void setCamposEditarRegistro(boolean valor){
        // Libera/bloqueia o painel
        this.painelEditarRegistro.setVisible(valor);
        
        // Se estiver ocultando, limpa os campos
        // (Possívelmente temporário)
        if(!valor){
            this.cRegistrosEditarCodigo.setText("");
            this.cRegistrosEditarAutor.setText("");
            this.cRegistrosEditarData.setText("");
            this.cRegistrosEditarHorario.setText("");
            this.cRegistrosEditarRegistro.setText("");
        }
        
        // Desabilita/reabilita outros botões/abas
        this.abas1.setEnabled(!valor);
        this.abas2.setEnabled(!valor);
        this.bRegistrosNovo.setEnabled(!valor);
        this.bRegistrosVer.setEnabled(!valor);
        this.bRegistrosEditar.setEnabled(!valor);
        this.bAtualizarEquipe.setEnabled(!valor);
        this.bAtualizarMeusChamados.setEnabled(!valor);
        this.bExibirEquipe.setEnabled(!valor);
        this.bExibirUsuario.setEnabled(!valor);
        
        // Desabilita/reablita tabelas
        this.tMeusChamados.setEnabled(!valor);
        this.tMinhaEquipe.setEnabled(!valor);
        this.tRegistros.setEnabled(!valor);
    }
    public void atualizarCampos(String username, int codigoUsuario, int codigoEquipe){
        this.codigoUsuario = codigoUsuario;
        this.codigoEquipe = codigoEquipe;
        this.username = username;
    }
    
    void atualizarTabelaChamados(int tipoAtualizacao){
        switch (this.lExibicao.getText()) {
            case "Exibição atual: Meus chamados abertos":
                this.atualizarTabelaChamados(tipoAtualizacao, true, this.codigoUsuario, 0);
                break;
            case "Exibição atual: Meus chamados suspensos":
                this.atualizarTabelaChamados(tipoAtualizacao, true, this.codigoUsuario, 1);
                break;
            case "Exibição atual: Chamados abertos da minha equipe":
                this.atualizarTabelaChamados(tipoAtualizacao, false, this.codigoEquipe, 0);
                break;
            default:
                this.atualizarTabelaChamados(tipoAtualizacao, false, this.codigoEquipe, 1);
                break;
        }
    }
    
    void atualizarTabelaUsuario(){
        try{
            ControleBanco CB = new ControleBanco();
            int chamadosAbertos = CB.receberChamados(this.codigoUsuario, 0);
            int chamadosSuspensos = CB.receberChamados(this.codigoUsuario, 1);
            
            this.DTMusuario.setNumRows(0);// Zerar tabelas
            
            if(chamadosAbertos > 0){
                DTMusuario.addRow(
                        new String[]{
                            "Chamados abertos",
                            Integer.toString(chamadosAbertos)//Integer.toString(CB.receberChamadosAbertos(this.codigoUsuario, 0))
                        }
                );
            }
            if(chamadosSuspensos > 0){
                DTMusuario.addRow(
                        new String[]{
                            "Chamados suspensos",
                            Integer.toString(chamadosSuspensos)//Integer.toString(CB.receberChamadosAbertos(this.codigoUsuario, 0))
                        }
                );
            }
            
            this.tMeusChamados.setModel(DTMusuario);
            this.tMeusChamados.getColumnModel().getColumn(0).setResizable(false); // Não permitir redimensionamento da primeira coluna
            this.tMeusChamados.getColumnModel().getColumn(1).setResizable(false); // Não permitir redimensionamento da segunda coluna
            this.tMeusChamados.getColumnModel().getColumn(0).setPreferredWidth(120); // Alterar tamanho da primeira coluna.
            this.tMeusChamados.getColumnModel().getColumn(1).setPreferredWidth(15); // Alterar tamanho da segunda coluna.
            
            
            
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void atualizarTabelaEquipe(){
        try{
            ControleBanco CB = new ControleBanco();
            int chamadosAbertos = CB.receberChamadosEquipe(this.codigoEquipe, 0);
            int chamadosSuspensos = CB.receberChamadosEquipe(this.codigoEquipe, 1);
            
            // Zerar tabelas
            this.DTMequipe.setNumRows(0);
            
            if(chamadosAbertos > 0){
                DTMequipe.addRow(
                        new String[]{
                            "Chamados abertos",
                            Integer.toString(chamadosAbertos)
                        }
                );
            }
            if(chamadosSuspensos > 0){
                DTMequipe.addRow(
                        new String[]{
                            "Chamados suspensos",
                            Integer.toString(chamadosSuspensos)
                        }
                );
            }
            
            this.tMinhaEquipe.setModel(DTMequipe);
            this.tMinhaEquipe.getColumnModel().getColumn(0).setResizable(false); // Não permitir redimensionamento da primeira coluna
            this.tMinhaEquipe.getColumnModel().getColumn(1).setResizable(false); // Não permitir redimensionamento da segunda coluna
            this.tMinhaEquipe.getColumnModel().getColumn(0).setPreferredWidth(120); // Alterar tamanho da primeira coluna.
            this.tMinhaEquipe.getColumnModel().getColumn(1).setPreferredWidth(15); // Alterar tamanho da segunda coluna.
            
            
            
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void atualizarTabelaChamados(int tipoChamados, boolean usuario, int codigoEquipe, int estado){
        /**
         * Tipo Chamados:
         * 0 - Padrão
         * 1 - Busca por campo
         * 2 - Busca por registro
         */
        
        try{
            ControleBanco CB = new ControleBanco();
            ArrayList<Chamado> listaChamados;
            if(tipoChamados == 1){
                listaChamados = CB.pesquisarPorCampo(this.leCampoBuscarDados01(), this.cBuscarDadosValor.getText(), this.cBuscarDadosIncluirFechados.isSelected());
            } else if(tipoChamados == 2){
                listaChamados = CB.pesquisarPorRegistro(this.cBuscarRegistroValor.getText(), this.cBuscarRegistroIncluirFechados.isSelected());
            } else {
                listaChamados = CB.receberListaChamados(usuario, codigoEquipe, estado);
            }
            
            // Zerar tabela
            this.DTMlistaChamados.setNumRows(0);
            
            for(int i = 0; i < listaChamados.size(); i++){
                DTMlistaChamados.addRow(
                                new String[]{
                                    Integer.toString(listaChamados.get(i).getCodigo()),
                                    listaChamados.get(i).getTitulo(),
                                    listaChamados.get(i).getCategoria(),
                                    listaChamados.get(i).getLocalizacao(),
                                    listaChamados.get(i).getNomeEstacao(),
                                    listaChamados.get(i).getDescricao(),
                                    CB.receberNomeResponsavel(listaChamados.get(i).getResponsavel()),
                                    listaChamados.get(i).getAbertoPor()
                                }
                );
            }
            
            this.tChamados.setModel(DTMlistaChamados);
            for(int i = 0; i < 8; i++){
                this.tChamados.getColumnModel().getColumn(i).setResizable(false); // Não permitir redimensionamento da coluna X
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void atualizarTabelaRegistros(int codigoChamado){
        try {
            ControleBanco CB = new ControleBanco();
            ArrayList<Registro> listaRegistros = CB.receberRegistros(codigoChamado);
            
            // Zerar tabela
            this.DTMRegistros.setNumRows(0);
            
            for(int i = 0; i < listaRegistros.size(); i++){
                DTMRegistros.addRow(
                                new String[]{
                                    Integer.toString(listaRegistros.get(i).getCodigoRegistro()),
                                    listaRegistros.get(i).getAutor(),
                                    listaRegistros.get(i).getData() + " - " + listaRegistros.get(i).getHorario(),
                                    listaRegistros.get(i).getRegistro()
                                }
                );
            }
            
            this.tRegistros.setModel(DTMRegistros);
            this.tRegistros.getColumnModel().getColumn(0).setResizable(false); // Não permitir redimensionamento da primeira coluna
            this.tRegistros.getColumnModel().getColumn(1).setResizable(false); // Não permitir redimensionamento da segunda coluna
            this.tRegistros.getColumnModel().getColumn(2).setResizable(false); // Não permitir redimensionamento da terceira coluna
            this.tRegistros.getColumnModel().getColumn(3).setResizable(false); // Não permitir redimensionamento da quarta coluna
            this.tRegistros.getColumnModel().getColumn(0).setPreferredWidth(30); // Alterar tamanho da primeira coluna.
            this.tRegistros.getColumnModel().getColumn(1).setPreferredWidth(100); // Alterar tamanho da segunda coluna.
            this.tRegistros.getColumnModel().getColumn(2).setPreferredWidth(120); // Alterar tamanho da terceira coluna.
            this.tRegistros.getColumnModel().getColumn(3).setPreferredWidth(520); // Alterar tamanho da quarta coluna.
            
        } catch (SQLException SE) {
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void receberEquipes(){
        try{
            ControleBanco CB = new ControleBanco();
            ArrayList<Equipe> listaEquipes = new ArrayList<>();
            listaEquipes = CB.receberEquipes();
            
            this.cDadosEquipe.removeAllItems();
            this.cDadosEquipe.addItem("---");
            
            for(int i = 1; i < listaEquipes.size(); i++){
                this.cDadosEquipe.addItem(listaEquipes.get(i).getNome());
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void atualizarFuncionarios(int codigoSetor){
        try{
            if(this.cDadosEquipe.getSelectedIndex() != 0){
                // Caso tenha uma equipe selecionada, busca todos os funcionários dessa equipe
                ControleBanco CB = new ControleBanco();
                ArrayList<Login> listaFunc = CB.receberFuncionariosSetor(codigoSetor);

                this.cDadosResponsavel.removeAllItems();
                this.cDadosResponsavel.addItem("---");

                for(int i = 0; i < listaFunc.size(); i++){
                    this.cDadosResponsavel.addItem(listaFunc.get(i).getNome());
                }
            } else {
                // Do contrário gera uma lista vazia
                this.cDadosResponsavel.removeAllItems();
                this.cDadosResponsavel.addItem("---");
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void selecionarResponsavel(int codigoChamado){
        if(this.chamadoAberto){
            try{
                // Varre o campo de nomes de responsáveis
                ArrayList<String> listaNomes = new ArrayList<>();
                for(int i = 1; i < this.cDadosResponsavel.getItemCount(); i++){
                    listaNomes.add((String)this.cDadosResponsavel.getItemAt(i));
                }
                
                // Busca no banco o nome do responsável do chamado aberto
                ControleBanco CB = new ControleBanco();
                String nomeBanco = CB.receberNomeResponsavelSelecionavel(codigoChamado);
                
                // Varre o vetor dos nomes em busca do nome do responsável
                for(int i = 0; i < listaNomes.size(); i++){
                    if(listaNomes.get(i).equals(nomeBanco)){
                        this.cDadosResponsavel.setSelectedIndex(i+1);
                        break;
                    }
                }
                
            }catch(SQLException SE){
                JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void realizarRegistroSistema(int codigoChamado, /*String username,*/ String registro){
        try{
            ControleBanco CB = new ControleBanco();
            CB.criarNovoRegistro(this.username, this.recebeDataDoDia(true), this.recebeHorario(true), registro, codigoChamado);
            this.atualizarTabelaRegistros(codigoChamado);
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void abrirChamado(int codigo){
        try{
            ControleBanco CB = new ControleBanco();
            this.chamadoAberto = true;
            Chamado C = new Chamado();
            C = CB.receberChamado(codigo);

            abas1.setSelectedIndex(1);
            abas2.setSelectedIndex(0);

            // Altera o texto para o estado do chamado
            if(C.getEstado() == 0){
                // Altera o texto do estado
                this.lEstado.setText("Aberto");
                
                // Atualiza o estado/texto do botão de suspender
                this.bDadosSuspender.setEnabled(true);
                this.bDadosSuspender.setText("Suspender chamado");
                
                // Atualiza o estado/texto do botão de encerrar
                this.bDadosEncerrar.setEnabled(true);
                this.bDadosEncerrar.setText("Encerrar chamado");
            } else if (C.getEstado() == 1){
                // Altera o texto do estado
                this.lEstado.setText("Suspenso");
                
                // Atualiza o estado/texto do botão de suspender
                this.bDadosSuspender.setEnabled(true);
                this.bDadosSuspender.setText("Reativar chamado");
                
                // Atualiza o estado/texto do botão de encerrar
                this.bDadosEncerrar.setEnabled(false);
                this.bDadosEncerrar.setText("Encerrar chamado");
            } else {
                // Altera o texto do estado
                this.lEstado.setText("Encerrado");
                
                // Atualiza o estado/texto do botão de suspender
                this.bDadosSuspender.setEnabled(false);
                this.bDadosSuspender.setText("Suspender chamado");
                
                // Atualiza o estado/texto do botão de encerrar
                this.bDadosEncerrar.setEnabled(true);
                this.bDadosEncerrar.setText("Reabrir chamado");
            }
            
            this.cDadosChamado.setText(Integer.toString(C.getCodigo()));
            this.cDadosTitulo.setText((C.getTitulo()));
            //this.cDadosCategoria.setText((C.getCategoria()));
            this.cDadosLocalizacao.setText(C.getLocalizacao());
            this.cDadosNomeEstacao.setText(C.getNomeEstacao());
            this.cDadosDescricao.setText(C.getDescricao());
            this.cDadosEquipe.setSelectedIndex(C.getEquipe()-1);
            
            // Seleciona categoria da lista
            for(int i = 0; i < this.cDadosCategoria.getItemCount(); i++){
                if(this.cDadosCategoria.getItemAt(i).equals(C.getCategoria())){
                    this.cDadosCategoria.setSelectedIndex(i);
                }
            }
            
            // Métodos para atualização dos menus
            this.selecionarResponsavel(C.getCodigo());
            this.atualizarTabelaRegistros(C.getCodigo());
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void fazerRegistroRapido(){
        try{
            if(this.chamadoAberto){
                String registro = "";
                Boolean desistiu = false;
                do{
                    registro = JOptionPane.showInputDialog(this, "Digite o registro:", "Novo registro", JOptionPane.PLAIN_MESSAGE);
                    if(registro.length() == 0 || registro.length() > 240){
                        int confirmaNovamente = JOptionPane.showConfirmDialog(this, "Registro inválido!\nDeseja tentar novamente?", "ERRO", JOptionPane.YES_NO_OPTION);
                        if(confirmaNovamente == JOptionPane.NO_OPTION){
                            desistiu = true;
                            break;
                        }
                    }
                }while(registro.length() == 0 || registro.length() > 240);
                if(!desistiu){
                    ControleBanco CB = new ControleBanco();
                    CB.criarNovoRegistro(this.username, this.recebeDataDoDia(true), this.recebeHorario(true), registro, Integer.parseInt(this.cDadosChamado.getText()));
                    
                    JOptionPane.showMessageDialog(this, "Registro realizado com sucesso!");
                }
                
                this.atualizarTabelaRegistros(Integer.parseInt(this.cDadosChamado.getText()));
            }
        }catch(NullPointerException NPE){
            int confirmaNovamente = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja cancelar o registro?", "Cancelar", JOptionPane.YES_NO_OPTION);
            if(confirmaNovamente == JOptionPane.NO_OPTION){
                this.fazerRegistroRapido();
            }
        }catch(SQLException SE){
            JOptionPane.showMessageDialog(this, SE.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String recebeDataDoDia(boolean registroSistema){
        if(!registroSistema){
            return new SimpleDateFormat("ddMMyyyy").format(new Date());
        } else {
            return new SimpleDateFormat("dd/MM/yyyy").format(new Date());
        }
    }
    
    private String recebeHorario(boolean registroSistema){
        if(!registroSistema){
            return new SimpleDateFormat("HHmm").format(new Date());
        } else {
            return new SimpleDateFormat("HH:mm").format(new Date());
        }
    }
    
    private void setCamposEdicao(boolean comecandoEdicao){
        if(comecandoEdicao){
            // Desativa botões de outras ações
            this.bDadosCapturar.setEnabled(false);
            this.bDadosEncerrar.setEnabled(false);
            this.bDadosFazerRegistro.setEnabled(false);
            this.bDadosSuspender.setEnabled(false);
            this.bDadosTrocarEquipe.setEnabled(false);
            this.bDadosTrocarResponsavel.setEnabled(false);
            
            this.bAtualizarEquipe.setEnabled(false);
            this.bAtualizarMeusChamados.setEnabled(false);
            this.bExibirEquipe.setEnabled(false);
            this.bExibirUsuario.setEnabled(false);
            
            this.abas1.setEnabled(false);
            this.abas2.setEnabled(false);

            // Habilita campos para edição
            this.cDadosCategoria.setEnabled(true);
            this.cDadosDescricao.setEditable(true);
            this.cDadosLocalizacao.setEditable(true);
            this.cDadosNomeEstacao.setEditable(true);
            this.cDadosTitulo.setEditable(true);
        } else {
            // Desabilita campos de edição
            this.cDadosCategoria.setEnabled(false);
            this.cDadosDescricao.setEditable(false);
            this.cDadosLocalizacao.setEditable(false);
            this.cDadosNomeEstacao.setEditable(false);
            this.cDadosTitulo.setEditable(false);

            // Reativa botões de outras ações
            this.bDadosCapturar.setEnabled(true);
            this.bDadosEncerrar.setEnabled(true);
            this.bDadosFazerRegistro.setEnabled(true);
            this.bDadosSuspender.setEnabled(true);
            this.bDadosTrocarEquipe.setEnabled(true);
            this.bDadosTrocarResponsavel.setEnabled(true);
            
            this.bAtualizarEquipe.setEnabled(true);
            this.bAtualizarMeusChamados.setEnabled(true);
            this.bExibirEquipe.setEnabled(true);
            this.bExibirUsuario.setEnabled(true);
            
            this.abas1.setEnabled(true);
            this.abas2.setEnabled(true);
        }
    }
    
    private void setCamposNovoRegistro(boolean isComeco){
        if(isComeco){
            // Desabilita outros botões
            this.bRegistrosNovo.setEnabled(false);
            this.bRegistrosVer.setEnabled(false);
            this.bAtualizarEquipe.setEnabled(false);
            this.bAtualizarMeusChamados.setEnabled(false);
            this.bExibirEquipe.setEnabled(false);
            this.bExibirUsuario.setEnabled(false);
            
            // Desabilita abas
            this.abas1.setEnabled(false);
            this.abas2.setEnabled(false);
        } else {
            // Reabilita outros botões
            this.bRegistrosNovo.setEnabled(true);
            this.bRegistrosVer.setEnabled(true);
            this.bAtualizarEquipe.setEnabled(true);
            this.bAtualizarMeusChamados.setEnabled(true);
            this.bExibirEquipe.setEnabled(true);
            this.bExibirUsuario.setEnabled(true);
            
            // Reabilita abas
            this.abas1.setEnabled(true);
            this.abas2.setEnabled(true);
        }
    }
    
    private void setCamposAlterarResponsavel(boolean isEquipe, boolean comecoEdicao){
        if(comecoEdicao){
            // Desativa botões de outras ações
            this.bDadosCapturar.setEnabled(false);
            this.bDadosEncerrar.setEnabled(false);
            this.bDadosFazerRegistro.setEnabled(false);
            this.bDadosSuspender.setEnabled(false);
            this.bDadosEditar.setEnabled(false);
            this.bAtualizarEquipe.setEnabled(false);
            this.bAtualizarMeusChamados.setEnabled(false);
            this.bExibirEquipe.setEnabled(false);
            this.bExibirUsuario.setEnabled(false);

            this.abas1.setEnabled(false);
            this.abas2.setEnabled(false);

            // Habilita campo para edição
            if(isEquipe){
                this.bDadosTrocarResponsavel.setEnabled(false);
                this.cDadosEquipe.setEnabled(true);
            } else {
                this.bDadosTrocarEquipe.setEnabled(false);
                this.cDadosResponsavel.setEnabled(true);
            }
        } else {
            // Reativa botões de outras ações
            this.bDadosCapturar.setEnabled(true);
            this.bDadosEncerrar.setEnabled(true);
            this.bDadosFazerRegistro.setEnabled(true);
            this.bDadosSuspender.setEnabled(true);
            this.bDadosEditar.setEnabled(true);
            this.bDadosTrocarResponsavel.setEnabled(true);
            this.bAtualizarEquipe.setEnabled(true);
            this.bAtualizarMeusChamados.setEnabled(true);
            this.bExibirEquipe.setEnabled(true);
            this.bExibirUsuario.setEnabled(true);

            this.abas1.setEnabled(true);
            this.abas2.setEnabled(true);

            // Desabilita campo
            if(isEquipe){
                this.bDadosTrocarResponsavel.setEnabled(true);
                this.cDadosEquipe.setEnabled(false);
            } else {
                this.bDadosTrocarEquipe.setEnabled(true);
                this.cDadosResponsavel.setEnabled(false);
            }
        }
    }
    
    private String leCampoBuscarDados01(){
        String resultado = "INVÁLIDO";
        if(this.cBuscarDados01.getSelectedIndex() == 1){
            resultado = "titulo";
        } else if(this.cBuscarDados01.getSelectedIndex() == 2){
            resultado = "localizacao";
        } else if(this.cBuscarDados01.getSelectedIndex() == 3){
            resultado = "nomeEstacao";
        } else if(this.cBuscarDados01.getSelectedIndex() == 4){
            resultado = "descricao";
        } else if(this.cBuscarDados01.getSelectedIndex() == 5){
            resultado = "abertoPor";
        }
        return resultado;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane abas1;
    private javax.swing.JTabbedPane abas2;
    private javax.swing.JButton bAtualizarEquipe;
    private javax.swing.JButton bAtualizarMeusChamados;
    private javax.swing.JButton bBuscarDados;
    private javax.swing.JButton bBuscarNumero;
    private javax.swing.JButton bBuscarRegistro;
    private javax.swing.JButton bDadosCapturar;
    private javax.swing.JButton bDadosEditar;
    private javax.swing.JButton bDadosEncerrar;
    private javax.swing.JButton bDadosFazerRegistro;
    private javax.swing.JButton bDadosSuspender;
    private javax.swing.JButton bDadosTrocarEquipe;
    private javax.swing.JButton bDadosTrocarResponsavel;
    private javax.swing.JButton bExibirEquipe;
    private javax.swing.JButton bExibirUsuario;
    private javax.swing.JButton bNovoRegistroCriar;
    private javax.swing.JButton bRegistrosEditar;
    private javax.swing.JButton bRegistrosEditarAtualizar;
    private javax.swing.JButton bRegistrosEditarCancelar;
    private javax.swing.JButton bRegistrosNovo;
    private javax.swing.JButton bRegistrosVer;
    private javax.swing.JButton bVerChamado;
    private javax.swing.JComboBox cBuscarDados01;
    private javax.swing.JCheckBox cBuscarDadosIncluirFechados;
    private javax.swing.JTextField cBuscarDadosValor;
    private javax.swing.JTextField cBuscarNumero;
    private javax.swing.JCheckBox cBuscarRegistroIncluirFechados;
    private javax.swing.JTextField cBuscarRegistroValor;
    private javax.swing.JComboBox cDadosCategoria;
    private javax.swing.JTextField cDadosChamado;
    private javax.swing.JTextArea cDadosDescricao;
    private javax.swing.JComboBox cDadosEquipe;
    private javax.swing.JTextField cDadosLocalizacao;
    private javax.swing.JTextField cDadosNomeEstacao;
    private javax.swing.JComboBox cDadosResponsavel;
    private javax.swing.JTextField cDadosTitulo;
    private javax.swing.JFormattedTextField cRegistroData;
    private javax.swing.JFormattedTextField cRegistroHorario;
    private javax.swing.JTextArea cRegistroInform;
    private javax.swing.JTextField cRegistrosEditarAutor;
    private javax.swing.JTextField cRegistrosEditarCodigo;
    private javax.swing.JFormattedTextField cRegistrosEditarData;
    private javax.swing.JFormattedTextField cRegistrosEditarHorario;
    private javax.swing.JTextArea cRegistrosEditarRegistro;
    private javax.swing.JPanel chamadoDados;
    private javax.swing.JPanel chamadoRegistros;
    private javax.swing.JPanel chamadosBuscar;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lEstado;
    private javax.swing.JLabel lExibicao;
    private javax.swing.JPanel painelEditarRegistro;
    private javax.swing.JTable tChamados;
    private javax.swing.JTable tMeusChamados;
    private javax.swing.JTable tMinhaEquipe;
    private javax.swing.JTable tRegistros;
    // End of variables declaration//GEN-END:variables
}
